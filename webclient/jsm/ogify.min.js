function parseDate(date, time) {
    return dateItems = date.split("."), timeItems = time.split(":"), new Date(dateItems[2], dateItems[1] - 1, dateItems[0], timeItems[0], timeItems[1], 0, 0);
}

var ogifyApp = angular.module("ogifyApp", [ "ogifyServices", "ngRoute", "ngCookies", "uiGmapgoogle-maps", "angulartics", "angulartics.google.analytics", "ngSanitize" ]);

ogifyApp.service("UserProfileService", function($interval, $rootScope, UserProfile) {
    var currentUser = UserProfile.getCurrentUser(), unratedOrdersCache = [], updateUnratedOrdersCache = function() {
        unratedOrdersCache = UserProfile.getUnratedOrders({
            userId: currentUser.userId
        }, null, function() {
            $rootScope.$broadcast("unratedOrdersUpdated");
        });
    };
    return currentUser.$promise.then(function(user) {
        unratedOrdersCache = UserProfile.getUnratedOrders({
            userId: currentUser.userId
        }, null, function() {
            $interval(updateUnratedOrdersCache, 12e4), $rootScope.$broadcast("unratedOrdersUpdated");
        });
    }), {
        getUserProfile: function() {
            return currentUser;
        },
        getUnratedOrders: function() {
            return unratedOrdersCache;
        },
        forceUpdate: function() {
            currentUser.$promise.$resolved && updateUnratedOrdersCache();
        }
    };
});

var waitingDialog = waitingDialog || function($) {
    "use strict";
    var $dialog = $('<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;"><div class="modal-dialog modal-m"><div class="modal-content"><div class="modal-header"><h3 style="margin:0;"></h3></div><div class="modal-body"><div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div></div></div></div></div>');
    return {
        show: function(message, options) {
            "undefined" == typeof options && (options = {}), "undefined" == typeof message && (message = "Загрузка...");
            var settings = $.extend({
                dialogSize: "m",
                progressType: "",
                onHide: null
            }, options);
            $dialog.find(".modal-dialog").attr("class", "modal-dialog").addClass("modal-" + settings.dialogSize), 
            $dialog.find(".progress-bar").attr("class", "progress-bar"), settings.progressType && $dialog.find(".progress-bar").addClass("progress-bar-" + settings.progressType), 
            $dialog.find("h3").text(message), "function" == typeof settings.onHide && $dialog.off("hidden.bs.modal").on("hidden.bs.modal", function(e) {
                settings.onHide.call($dialog);
            }), $dialog.modal();
        },
        hide: function() {
            $dialog.modal("hide");
        }
    };
}(jQuery), BASE_PATH = "/rest", AUTH_PATH = "/auth", PROFILE_PATH = "/user", ORDER_PATH = "/orders", ogifyServices = angular.module("ogifyServices", [ "ngResource" ]);

ogifyServices.factory("AuthInterceptor", [ "$q", "$rootScope", function($q, $rootScope) {
    return {
        response: function(response) {
            return response.config.url != BASE_PATH + AUTH_PATH + "/getRequestUri" && ($rootScope.authenticated = !0), 
            response;
        },
        responseError: function(response) {
            return 401 == response.status && ($rootScope.authenticated = !1), $q.reject(response);
        }
    };
} ]), ogifyServices.factory("AuthResource", [ "$resource", "$rootScope", function($resource, $rootScope, AuthInterceptor) {
    return $resource(BASE_PATH + AUTH_PATH + "/getRequestUri", {}, {
        getVkUri: {
            method: "GET",
            params: {
                sn: "vk"
            }
        },
        getFacebookUri: {
            method: "GET",
            params: {
                sn: "facebook"
            }
        },
        authenticationStatus: {
            method: "GET",
            url: BASE_PATH + AUTH_PATH + "/isAuthenticated",
            params: {},
            interceptor: AuthInterceptor
        }
    });
} ]), ogifyServices.factory("UserProfile", [ "$resource", "AuthInterceptor", function($resource, AuthInterceptor) {
    return $resource(BASE_PATH + PROFILE_PATH, {}, {
        getCurrentUser: {
            method: "GET",
            params: {},
            interceptor: AuthInterceptor
        },
        get: {
            url: BASE_PATH + PROFILE_PATH + "/:userId",
            method: "GET"
        },
        getFriends: {
            url: BASE_PATH + PROFILE_PATH + "/:userId/friends",
            isArray: !0,
            params: {
                userId: "@userId"
            }
        },
        getExecutingOrders: {
            url: BASE_PATH + PROFILE_PATH + "/:userId/executing",
            isArray: !0,
            params: {
                userId: "@userId"
            }
        },
        getCreatedOrders: {
            url: BASE_PATH + PROFILE_PATH + "/:userId/created",
            isArray: !0,
            params: {
                userId: "@userId"
            }
        },
        getUnratedOrders: {
            url: BASE_PATH + PROFILE_PATH + "/:userId/unrated",
            isArray: !0,
            params: {
                userId: "@userId"
            }
        }
    });
} ]), ogifyServices.factory("Order", [ "$resource", function($resource) {
    return $resource(BASE_PATH + ORDER_PATH, {}, {
        get: {
            url: BASE_PATH + ORDER_PATH + "/:orderId",
            method: "GET",
            params: {
                orderId: "@orderId"
            }
        },
        create: {
            method: "POST"
        },
        getNearMe: {
            url: BASE_PATH + ORDER_PATH + "/near",
            method: "GET",
            params: {
                neLatitude: "",
                neLongitude: "",
                swLatitude: "",
                swLongitude: ""
            },
            isArray: !0
        },
        getDoneOrders: {
            url: BASE_PATH + ORDER_PATH + "/done",
            method: "GET",
            params: {
                latitude: "",
                longitude: ""
            }
        },
        getMyOrders: {
            method: "GET",
            isArray: !0
        },
        getToExecution: {
            url: BASE_PATH + ORDER_PATH + "/:orderId/getToExecution",
            method: "PUT",
            params: {
                orderId: "@orderId"
            }
        },
        getItemsList: {
            url: BASE_PATH + ORDER_PATH + "/:orderIditems",
            method: "GET",
            isArray: !0
        },
        getOrdersLinks: {
            url: BASE_PATH + ORDER_PATH + "/socialLinks",
            method: "GET"
        },
        changeStatus: {
            url: BASE_PATH + ORDER_PATH + "/:orderId/status",
            method: "PUT",
            params: {
                orderId: "@orderId"
            }
        },
        denyOrderExecution: {
            url: BASE_PATH + ORDER_PATH + "/:orderId/executor",
            method: "DELETE",
            params: {
                orderId: "@orderId"
            }
        },
        rateOrder: {
            url: BASE_PATH + ORDER_PATH + "/:orderId/rate",
            method: "PUT",
            params: {
                orderId: "@orderId"
            }
        }
    });
} ]), ogifyApp.service("myAddress", function() {
    var address = {
        latitude: 0,
        longitude: 0,
        plainAddress: ""
    };
    return {
        getAddress: function() {
            return address;
        },
        setAddress: function(textAddress, latitude, longitude) {
            address.plainAddress = textAddress, address.latitude = latitude, address.longitude = longitude;
        }
    };
}), ogifyApp.config(function($routeProvider, uiGmapGoogleMapApiProvider) {
    $routeProvider.when("/current", {
        templateUrl: "templates/current.html"
    }).when("/dashboard", {
        templateUrl: "templates/dashboard.html",
        controller: "DashboardController"
    }).when("/profile/:userId", {
        templateUrl: "templates/user-profile.html",
        controller: "ProfilePageController",
        resolve: {
            hideModal: function() {
                return angular.element("#showOrderModal").modal("hide"), !0;
            }
        }
    }).when("/my-orders", {
        templateUrl: "templates/my-orders.html",
        controller: "MyOrdersController"
    }).when("/in-progress", {
        templateUrl: "templates/in-progress.html",
        controller: "DashboardController"
    }).otherwise({
        redirectTo: "/dashboard"
    }), uiGmapGoogleMapApiProvider.configure({
        key: "AIzaSyB3JGdwrXd_unNoKWm8wLWzWO2NTjMZuHA",
        v: "3.17",
        libraries: "weather,geometry,visualization",
        language: "ru"
    });
}), ogifyApp.run(function($rootScope, $http, $cookies, $window, $timeout) {
    $rootScope.navBarTemplateUri = "templates/navbar/navbar.html", $rootScope.modalWindowsUri = "templates/modals/modals.html", 
    $rootScope.createOrderTemplateUri = "templates/modals/new-order.html", $rootScope.showOrderTemplateUri = "templates/modals/order-details.html", 
    $rootScope.rateDoneOrderTemplateUri = "templates/modals/rate-done-order.html", $rootScope.landingUri = "/landing", 
    void 0 != $cookies.get("sId") && void 0 != $cookies.get("ogifySessionSecret") || "localhost" == $window.location.hostname || $window.location.replace($rootScope.landingUri);
    var timeoutPromise;
    $rootScope.$watch(function() {
        return $http.pendingRequests.length > 0;
    }, function(v) {
        v ? timeoutPromise = $timeout(waitingDialog.show, 1500) : ($timeout.cancel(timeoutPromise), 
        waitingDialog.hide());
    });
}), ogifyApp.controller("NavBarController", function($scope, $window, $cookies, $location, AuthResource, UserProfile) {
    $scope.modalWindowTemplateUri = "templates/modals/auth-modal.html", $scope.authVk = function() {
        AuthResource.getVkUri(function(data) {
            $window.location.href = data.requestUri;
        });
    }, $scope.logoutSN = function() {
        var cookiesPath = {
            path: "/"
        };
        $cookies.remove("JSESSIONID", cookiesPath), $cookies.remove("ogifySessionSecret", cookiesPath), 
        $cookies.remove("sId", cookiesPath), $window.location.reload();
    }, $scope.updateOrderData = function() {}, $scope.user = UserProfile.getCurrentUser(), 
    $scope.getClass = function(partOfPath) {
        return $location.path().indexOf(partOfPath) > -1 ? "active" : "";
    };
}), ogifyApp.controller("CreateOrderModalController", function($rootScope, $scope, $filter, Order, myAddress) {
    $scope.telephoneInput = angular.element("#telephoneNumber"), $scope.telephoneInput.intlTelInput({
        defaultCountry: "ru",
        preferredCountries: [ "ru", "by", "ua" ]
    }), $scope.telephoneInput.blur(function() {
        if (this.value.length < 1) return void this.classList.remove("iti-invalid-key");
        var isNumberValid = $scope.telephoneInput.intlTelInput("isValidNumber");
        isNumberValid ? this.classList.remove("iti-invalid-key") : this.classList.add("iti-invalid-key");
    }), $scope.telephoneInput.keyup(function() {
        var isNumberValid = $scope.telephoneInput.intlTelInput("isValidNumber"), error = $scope.telephoneInput.intlTelInput("getValidationError");
        isNumberValid || error != intlTelInputUtils.validationError.TOO_LONG && error != intlTelInputUtils.validationError.IS_POSSIBLE ? this.classList.remove("iti-invalid-key") : this.classList.add("iti-invalid-key");
    }), $scope.order = {
        expireDate: $filter("date")(new Date(), "dd.MM.yyyy"),
        expireTime: $filter("date")(new Date(), "H:MM"),
        reward: "",
        address: myAddress.getAddress(),
        namespace: "FriendsOfFriends",
        description: "",
        items: [ {} ]
    }, $scope.alerts = {
        warning: [],
        error: []
    }, $scope.showAlert = function(message, type) {
        var alert = {
            message: message
        };
        $scope.alerts[type] = [ alert ];
    }, $scope.hideAlert = function() {
        $scope.alerts.warning = [], $scope.alerts.error = [];
    }, $scope.chooseTime = function() {
        var input = angular.element("#expire_in_time").clockpicker();
        input.clockpicker("show");
    }, $scope.addToList = function() {
        $scope.order.items.push({});
    }, $scope.itemInList = function(index) {
        return index != $scope.order.items.length - 1;
    }, $scope.removeFromList = function(index) {
        $scope.order.items.splice(index, 1);
    }, $scope.createOrder = function() {
        var last_item_index = $scope.order.items.length - 1, $last_item = $scope.order.items[last_item_index];
        $last_item.comment || $scope.order.items.splice(last_item_index, 1);
        var newOrder = {
            items: $scope.order.items,
            expireIn: parseDate($scope.order.expireDate, $scope.order.expireTime).getTime(),
            latitude: myAddress.getAddress().latitude,
            longitude: myAddress.getAddress().longitude,
            reward: $scope.order.reward,
            telephoneNumber: $scope.telephoneInput[0].value.length > 0 ? $scope.telephoneInput.intlTelInput("getNumber") : null,
            status: "New",
            owner: null,
            executor: null,
            address: $scope.order.address.plainAddress,
            doneAt: null,
            id: null,
            createdAt: null,
            namespace: $scope.order.namespace,
            description: $scope.order.description
        }, MAX_TEXT_SIZE = 200, restrictions = [ {
            isAppearing: newOrder.description.length > MAX_TEXT_SIZE,
            message: "Слишком длинное описание заказа"
        }, {
            isAppearing: newOrder.reward.length > MAX_TEXT_SIZE,
            message: "Слишком длинное описание вознаграждения"
        }, {
            isAppearing: newOrder.address.length > MAX_TEXT_SIZE,
            message: "Слишком длинный адрес"
        }, {
            isAppearing: !$scope.telephoneInput.intlTelInput("isValidNumber") && $scope.telephoneInput[0].value.length > 0,
            message: "Некорректный номер телефона"
        } ];
        for (var i in restrictions) if (restrictions[i].isAppearing) return void $scope.showAlert(restrictions[i].message, "warning");
        newOrder = Order.create(newOrder, function(successResponse) {
            angular.element("#createOrderModal").modal("hide"), $scope.hideAlert(), $scope.order = {
                expireDate: $filter("date")(new Date(), "dd.MM.yyyy"),
                expireTime: $filter("date")(new Date(), "hh:mm"),
                reward: "",
                address: myAddress.getAddress(),
                namespace: "FriendsOfFriends",
                description: "",
                items: [ {} ]
            }, $rootScope.$broadcast("createdNewOrderEvent", newOrder);
        }, function(errorResponse) {
            $scope.showAlert("Неизвестная техническая ошибка: попробуйте позже", "error");
        });
    };
}), ogifyApp.factory("ClickedOrder", function() {
    var ClickedOrder = {};
    return ClickedOrder.order = {
        description: null,
        reward: null,
        items: [],
        address: null,
        expireIn: null,
        owner: {
            photoUri: null,
            fullName: null
        },
        executor: {
            photoUri: null,
            fullName: null
        }
    }, ClickedOrder.set = function(order) {
        ClickedOrder.order = order, ClickedOrder.rate = !1;
    }, ClickedOrder.setWithRate = function(order, rate) {
        ClickedOrder.order = order, ClickedOrder.rate = rate;
    }, ClickedOrder;
}), ogifyApp.controller("ShowOrderModalController", function($scope, $rootScope, $filter, ClickedOrder, Order, $interval) {
    $scope.timer = 60;
    var stop;
    $scope.startTimer = function() {
        angular.isDefined(stop) || (stop = $interval(function() {
            $scope.timer > 0 ? $scope.timer = $scope.timer - 1 : $scope.stopTimer();
        }, 1e3));
    }, $scope.stopTimer = function() {
        angular.isDefined(stop) && ($interval.cancel(stop), stop = void 0);
    }, $scope.$on("$destroy", function() {
        $scope.stopTimer();
    }), $scope.getOrder = function() {
        return ClickedOrder.order;
    }, $scope.getDescription = function() {
        return ClickedOrder.order.description;
    }, $scope.getItemList = function() {
        return ClickedOrder.order.items;
    }, $scope.itemsEmpty = function() {
        return 0 == ClickedOrder.order.items.length;
    }, $scope.getOwnerName = function() {
        return ClickedOrder.order.owner.fullName;
    }, $scope.getExecutorName = function() {
        return ClickedOrder.order.executor.fullName;
    }, $scope.getOwnerPhotoUrl = function() {
        return ClickedOrder.order.owner.photoUri;
    }, $scope.getExecutorPhotoUrl = function() {
        return ClickedOrder.order.executor.photoUri;
    }, $scope.getAddress = function() {
        return ClickedOrder.order.address;
    }, $scope.getReward = function() {
        return ClickedOrder.order.reward;
    }, $scope.getStatus = function() {
        return ClickedOrder.order.status;
    }, $scope.getRate = function() {
        return ClickedOrder.rate;
    }, $scope.userTakesTask = function() {
        Order.getToExecution({
            orderId: ClickedOrder.order.id
        }, function(successResponse) {
            angular.element("#showOrderModal").modal("hide"), $rootScope.$broadcast("takeOrderEvent");
        }, function(errorResponse) {}), $scope.startTimer();
    }, $scope.orderToDone = function() {
        Order.changeStatus({
            orderId: ClickedOrder.order.id
        }, 2, function(successResponse) {
            angular.element("#showOrderModal").modal("hide"), $rootScope.$broadcast("finishOrderEvent");
        }, function(errorResponse) {});
    }, $scope.cancelOrder = function() {
        Order.denyOrderExecution({
            orderId: ClickedOrder.order.id
        }, function(successResponse) {
            angular.element("#showOrderModal").modal("hide"), $rootScope.$broadcast("finishOrderEvent");
        }, function(errorResponse) {});
    }, $scope.rateMyOrder = function(rating) {
        Order.rateOrder({
            orderId: ClickedOrder.order.id
        }, {
            rate: rating
        }, function(successResponse) {
            $rootScope.$broadcast("rateMyOrderEvent", ClickedOrder.order.id);
        }, function(errorResponse) {});
    }, $scope.getExpireDate = function() {
        return $filter("date")(ClickedOrder.order.expireIn, "d MMMM yyyy");
    }, $scope.getExpireTime = function() {
        return $filter("date")(ClickedOrder.order.expireIn, "HH:mm");
    };
}).directive("myCurrentTime", [ "$interval", "dateFilter", function($interval, dateFilter) {
    return function(scope, element, attrs) {
        function updateTime() {
            element.text(dateFilter(new Date()));
        }
        var stopTime;
        scope.$watch(attrs.myCurrentTime, function(value) {
            updateTime();
        }), stopTime = $interval(updateTime, 1e3), element.on("$destroy", function() {
            $interval.cancel(stopTime);
        });
    };
} ]), ogifyApp.controller("rateDoneOrderController", function($scope, $rootScope, $filter, ClickedOrder, Order) {
    $scope.rateCurrentOrder = function(rating) {
        Order.rateOrder({
            orderId: ClickedOrder.order.id
        }, {
            rate: rating
        }, function(successResponse) {
            angular.element("#rateDoneOrder").modal("hide");
        }, function(errorResponse) {});
    };
}), ogifyApp.controller("DashboardController", function($rootScope, $scope, $filter, uiGmapGoogleMapApi, $location, Order, myAddress, ClickedOrder, UserProfile) {
    $scope.user = UserProfile.get(), $scope.getOrdersLinks = function() {
        var showingOrdersIds = [];
        $scope.showingOrders.forEach(function(order) {
            showingOrdersIds.push(order.id);
        }), showingOrdersIds.length > 0 && ($scope.ordersLinks = Order.getOrdersLinks({
            ordersIds: showingOrdersIds
        }));
    }, $scope.selfMarker = {
        coords: {
            latitude: 55.927106,
            longitude: 37.523662
        },
        id: "currentPosition",
        visible: !1
    }, $scope.markersEvents = {
        click: function(marker, eventName, model) {
            $scope.setClickedOrder(model), $("#showOrderModal").modal();
        }
    };
    var mapChanged = function(map) {
        var bounds = map.getBounds();
        $scope.map.bounds.neLatitude = bounds.getNorthEast().lat(), $scope.map.bounds.neLongitude = bounds.getNorthEast().lng(), 
        $scope.map.bounds.swLatitude = bounds.getSouthWest().lat(), $scope.map.bounds.swLongitude = bounds.getSouthWest().lng(), 
        updateOrders();
    };
    $rootScope.map = {
        center: {
            latitude: 55.927106,
            longitude: 37.523662
        },
        zoom: 10,
        bounds: {
            neLatitude: 55.95,
            neLongitude: 37.82,
            swLatitude: 55.76,
            swLongitude: 37.37
        },
        control: {},
        events: {
            zoom_changed: function(map) {
                $scope.doSpider = map.getZoom() > 16;
            },
            dragend: mapChanged,
            idle: mapChanged
        }
    }, $scope.clusterOptions = {
        gridSize: 60,
        ignoreHidden: !0,
        minimumClusterSize: 2,
        maxZoom: 16
    }, $scope.spiderOptions = {
        keepSpiderfied: !0
    }, $scope.doSpider = !1;
    var getMaxOrdersInPage = function() {
        return Math.floor(Math.max((angular.element(".list-orders-height").height() - 2 * angular.element(".row").height()) / (angular.element("#hidden-order").height() + angular.element(".row").height()), 1));
    }, getMaxPagesInBar = function() {
        return 9;
    };
    $rootScope.pageParameters || ($rootScope.pageParameters = {
        pageSize: getMaxOrdersInPage(),
        pagesInBar: getMaxPagesInBar()
    }), $scope.$on("createdNewOrderEvent", function(event, order) {}), $scope.$on("finishOrderEvent", function(event) {
        switchToInProgressOrders();
    }), $scope.$on("takeOrderEvent", function(event) {
        switchToNearOrders();
    });
    var switchToInProgressOrders = function() {
        $scope.user.$promise.then(function(user) {
            UserProfile.getExecutingOrders({
                userId: user.userId
            }).$promise.then(function(data) {
                $scope.executingOrders = data, $scope.showingOrders = data, $scope.totalPages = window.Math.ceil(data.length / $rootScope.pageParameters.pageSize), 
                $scope.currentPage = {
                    page: 0,
                    pages: _.range(window.Math.min($scope.totalPages, $rootScope.pageParameters.pagesInBar))
                };
            });
        });
    }, switchToNearOrders = function() {
        Order.getNearMe($scope.map.bounds).$promise.then(function(data) {
            $scope.showingOrders = data, $scope.getOrdersLinks(), $scope.totalPages = window.Math.ceil(data.length / $rootScope.pageParameters.pageSize), 
            $scope.currentPage = {
                page: 0,
                pages: _.range(window.Math.min($scope.totalPages, $rootScope.pageParameters.pagesInBar))
            };
        });
    }, updateOrders = function() {
        $location.path().indexOf("dashboard") > -1 ? switchToNearOrders() : switchToInProgressOrders();
    };
    updateOrders(), $scope.setClickedOrder = function(order) {
        ClickedOrder.set(order);
    }, $scope.previousPage = function(currentPage) {
        currentPage.page > 0 && (currentPage.page -= 1, currentPage.page + 1 == currentPage.pages[0] && (Math = window.Math, 
        currentPage.pages = _.range(Math.floor(currentPage.page / $rootScope.pageParameters.pagesInBar), Math.min(Math.floor(currentPage.page / $rootScope.pageParameters.pagesInBar) + $rootScope.pageParameters.pagesInBar, $scope.totalPages))));
    }, $scope.nextPage = function(currentPage) {
        currentPage.page < $scope.totalPages - 1 && (currentPage.page += 1, currentPage.page - 1 == currentPage.pages[currentPage.pages.length - 1] && (currentPage.pages = _.range(currentPage.page, window.Math.min(currentPage.page + $rootScope.pageParameters.pagesInBar, $scope.totalPages))));
    }, $scope.setPage = function(currentPage, i) {
        currentPage.page = i;
    }, uiGmapGoogleMapApi.then(function(maps) {
        $scope.maps = maps, navigator.geolocation && navigator.geolocation.getCurrentPosition(function(position) {
            $scope.map.center = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
            };
            var geocoder = new google.maps.Geocoder(), myposition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            geocoder.geocode({
                latLng: myposition
            }, function(data, status) {
                status == google.maps.GeocoderStatus.OK && myAddress.setAddress(data[0].formatted_address, position.coords.latitude, position.coords.longitude);
            }), $scope.map.control.refresh($scope.map.center), $scope.map.zoom = 11, selfMarker = {
                options: {
                    draggable: !0,
                    animation: google.maps.Animation.DROP,
                    icon: "libs/images/man_marker.png"
                },
                coords: {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                },
                events: {
                    dragend: function(marker, eventName, args) {
                        var latitude = marker.getPosition().lat(), longitude = marker.getPosition().lng(), geocoder = new google.maps.Geocoder(), myposition = new google.maps.LatLng(latitude, longitude);
                        geocoder.geocode({
                            latLng: myposition
                        }, function(data, status) {
                            status == google.maps.GeocoderStatus.OK && myAddress.setAddress(data[0].formatted_address, latitude, longitude);
                        });
                    }
                },
                id: "currentPosition",
                visible: !0
            }, $scope.selfMarker = selfMarker;
        });
    }), $scope.getExpireDate = function(order) {
        return $filter("date")(order.expireIn, "d MMMM yyyy HH:mm");
    };
}), ogifyApp.service("currentUserProfile", function() {
}), ogifyApp.controller("ProfilePageController", function($scope, $routeParams, UserProfile) {
    $scope.currentUserProfile = UserProfile.get({
        userId: $routeParams.userId
    });
}), ogifyApp.controller("MyOrdersController", function($scope, UserProfile, ClickedOrder, UserProfileService) {
    $scope.user = UserProfileService.getUserProfile(), $scope.user.$promise.then(function() {
        $scope.myOrders = UserProfile.getCreatedOrders({
            userId: $scope.user.userId
        });
    }), UserProfileService.forceUpdate(), $scope.unratedOrders = UserProfileService.getUnratedOrders(), 
    $scope.$on("unratedOrdersUpdated", function(event, data) {
        $scope.unratedOrders = UserProfileService.getUnratedOrders();
    }), $scope.maxDescriptionLength = 50, $scope.maxAddressLength = 20, $scope.setClickedOrder = function(order) {
        ClickedOrder.set(order);
    }, $scope.setClickedOrderRate = function(order) {
        ClickedOrder.setWithRate(order, order.rate);
    }, $scope.onlyNew = function(order) {
        return "New" == order.status;
    }, $scope.onlyRunning = function(order) {
        return "Running" == order.status;
    }, $scope.onlyDone = function(order) {
        return "Completed" == order.status;
    }, $scope.$on("createdNewOrderEvent", function(event, order) {
        order.rate = !1, $scope.myOrders.push(order);
    });
});